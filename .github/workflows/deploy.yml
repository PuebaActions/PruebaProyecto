name: Validar aprobación en PR

on:
  pull_request:
    branches: [ "main" ]
    #types: [opened, synchronize, reopened, review_requested, review]

jobs:
  validate-approval:
    runs-on: ubuntu-latest
    steps:
      - name: Revisar aprobación del PR
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            // Guardamos la última revisión de cada usuario
            let effectiveReviews = {};
            reviews.forEach(review => {
              effectiveReviews[review.user.login] = review.state;
            });
            // Si hay aprobación de usuario distinto a MGVega, fallamos
            for (const [user, state] of Object.entries(effectiveReviews)) {
              if (user !== 'MGVega' && state === 'APPROVED') {
                core.setFailed(`Aprobación no permitida: ${user} aprobó el PR.`);
              }
            }
            // Además, validamos que MGVega haya aprobado
            if (!effectiveReviews['MGVega'] || effectiveReviews['MGVega'] !== 'APPROVED') {
              core.setFailed("El PR necesita la aprobación de MGVega.");
            }
  check_approval:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get PR reviews
      uses: peter-evans/review-check@v1
      id: review
      with:
        required_approvals: 1
        approvers: "MGVega"
    
    - name: Fail if MGVega has not approved
      if: steps.review.outputs.approved != 'true'
      run: |
        echo "PR has not been approved by MGVega. Merge is not allowed."
        exit 1
